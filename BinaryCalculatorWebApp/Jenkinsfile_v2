pipeline {
    environment {
        SERVICE_ACCOUNT = credentials('service_account') // GCP service account JSON
        PROJECT = credentials('project_id')              // GCP project ID
        REPO_PATH = credentials('repo_path')             // Docker repo path
        APP_NAME = "binarycalculatorwebapp"              // Application name
        IMAGE_TAG = "$REPO_PATH/$APP_NAME"               // Full Docker image path
        CLUSTER = credentials('cluster_name')            // Kubernetes cluster name
        CLUSTER_ZONE = credentials('cluster_zone')       // Cluster zone
    }
    
    agent {
        kubernetes {
            label 'sample-app'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels: 
                component: ci
            spec:
              containers:
              - name: gcloud
                image: google/cloud-sdk:latest
                command:
                - cat
                tty: true
            """
        }
    }
    
    tools {
        maven 'maven'
    }
    
    stages {
        stage ('Test') {
            steps {
                sh 'mvn clean test -f ./BinaryCalculatorWebApp/pom.xml'
            }
        }
        
        stage ('Build') {
            steps {
                sh 'mvn clean package -DskipTests -f ./BinaryCalculatorWebApp/pom.xml'
            }
        }
        
        stage ('Containerize') {
            steps {
                sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                sh 'gcloud config set project $PROJECT'
                sh 'gcloud builds submit -t $IMAGE_TAG ./BinaryCalculatorWebApp --suppress-logs'
            }
        }
        
        stage ('Deployment') {
            steps {
                sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                sh 'gcloud config set project $PROJECT'
                sh 'gcloud container clusters get-credentials $CLUSTER --region=$CLUSTER_ZONE'
                
                script {
                    try {
                        sh 'kubectl delete deployment binarycalculator-deployment || true'
                        sh 'kubectl delete service binarycalculator-service || true'
                    } catch (Exception e) {
                        echo "No previous deployment or service to delete."
                    }
                }
                
                sh 'kubectl create deployment binarycalculator-deployment --image $IMAGE_TAG --port=8080'
            }
        }
        
        stage ('Expose Service') {
            steps {
                sh 'gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT'
                sh 'gcloud config set project $PROJECT'
                sh 'gcloud container clusters get-credentials $CLUSTER --region=$CLUSTER_ZONE'
                
                script {
                    def serviceExists = sh (
                        script: 'kubectl get service binarycalculator-service || true',
                        returnStatus: true
                    )
                    
                    if (serviceExists != 0) {
                        sh 'kubectl expose deployment binarycalculator-deployment --type=LoadBalancer --name=binarycalculator-service'
                    }
                    
                    sh "kubectl get service binarycalculator-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
                }
            }
        }
    }
}
